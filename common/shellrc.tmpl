#import dotfiler.components as comps
#import dotfiler.paths as paths
#import os.path as path
#import os as os

#template add_path(lib, p)
#{if path.exists(p):
%{lib.add_path_no_check(p)}%>
#}
#end template

#template add_path_weak(lib, p)
#{if path.exists(p):
%{lib.add_path_weak_no_check(p)}%>
#}
#end template

#template main(lib)

#* Add PATHs
#{ for p in paths.executables:
%{add_path(lib, p)}%>
#}
#{ for p in paths.weak_executables:
%{add_path_weak(lib, p)}%>
#}

#* Fix TERM variable
#{if comps.Screen256ColorTermInfo.get().exists or comps.Screen256ColorTermCap.get().exists:
%{lib.replace_env("TERM", "screen", "screen-256color")}%>
#}

#* What is man's best friend?
%{lib.set_env_if_not_in("EDITOR", ["vim", "subl"], "vim")}%>

#* Abbreviations
%{lib.define_abbr("e", "edit")}%>
%{lib.define_abbr("g-s", "git status")}%>
%{lib.define_abbr("g-c", "git commit")}%>
%{lib.define_abbr("-jc", "journalctl")}%>
%{lib.define_abbr("jc-x", "journalctl -xe")}%>
%{lib.define_abbr("-sc", "systemctl")}%>
%{lib.define_abbr("sc-t", "systemctl start")}%>
%{lib.define_abbr("sc-p", "systemctl stop")}%>
%{lib.define_abbr("sc-r", "systemctl restart")}%>
%{lib.define_abbr("sc-s", "systemctl status")}%>
%{lib.define_abbr("lg", "lazygit")}%>

#{if comps.Lsd.get().exists:
%{lib.define_abbr("ls", comps.Lsd.get().path)}%>
%{lib.define_abbr("l", comps.Lsd.get().path + " -l")}%>
%{lib.define_abbr("la", comps.Lsd.get().path + " -a")}%>
%{lib.define_abbr("lla", comps.Lsd.get().path + " -la")}%>
%{lib.define_abbr("lt", comps.Lsd.get().path + " --tree")}%>
#}

#end template